{
  "fileName": "NXMDSValue.sol",
  "contractName": "NXMDSValue",
  "source": "/* Copyright (C) 2020 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity ^0.5.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Aggregator {\n  function latestAnswer() public view returns (int);\n}\n\ncontract NXMDSValue {\n\n  using SafeMath for uint;\n\n  /// @dev Get DAI-ETH feed from Chainlink and convert it to ETH-DAI(in bytes32).\n  /// @return Return ETH-DAI rate in wei.\n  function read() public view returns (bytes32)\n  {\n\n    // Instance to get DAI-ETH feed from chainlink.\n    Aggregator aggregator = Aggregator(0x773616E4d11A78F511299002da57A0a94577F1f4);\n    int rate = aggregator.latestAnswer();\n\n    // Chainlink returns an int256. Ensure the value is always positive.\n    require(rate > 0, \"Rate should be a positive integer\");\n\n    // Reciprocating the obtained value because DSValue requires the value to be in format (ETH-DAI).\n    // Convert value to bytes32 to follow the DSValue format.\n    return bytes32(uint(10 ** 36).div(uint(rate)));\n  }\n}\n",
  "sourcePath": "contracts/modules/capital/NXMDSValue.sol",
  "sourceMap": "841:762:34:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;841:762:34;;;;;;;",
  "deployedSourceMap": "841:762:34:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;841:762:34;;;;;;;;;;;;;;;;;;;1018:583;;;:::i;:::-;;;;;;;;;;;;;;;;;1055:7;1125:21;1160:42;1125:78;;1209:8;1220:10;-1:-1:-1;;;;;1220:23:34;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1220:25:34;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1220:25:34;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1220:25:34;;-1:-1:-1;1340:1:34;1333:8;;1325:54;;;;-1:-1:-1;;;;;1325:54:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1565:30;1570:8;1589:4;1565:30;:18;:30;:::i;:::-;1557:39;-1:-1:-1;;;1018:583:34;:::o;3073:130:1:-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;3073:130;-1:-1:-1;;;3073:130:1:o;3718:338::-;3804:7;3904:12;3897:5;3889:28;;;;-1:-1:-1;;;;;3889:28:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3889:28:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;;3718:338;-1:-1:-1;;;;;3718:338:1:o",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "ast": {
    "absolutePath": "contracts/modules/capital/NXMDSValue.sol",
    "exportedSymbols": {
      "Aggregator": [
        11964
      ],
      "NXMDSValue": [
        12006
      ]
    },
    "id": 12007,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11957,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "685:23:34"
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/math/SafeMath.sol",
        "id": 11958,
        "nodeType": "ImportDirective",
        "scope": 12007,
        "sourceUnit": 214,
        "src": "710:51:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 11964,
        "linearizedBaseContracts": [
          11964
        ],
        "name": "Aggregator",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": null,
            "id": 11963,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "latestAnswer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11959,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "808:2:34"
            },
            "returnParameters": {
              "id": 11962,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11961,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 11963,
                  "src": "832:3:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 11960,
                    "name": "int",
                    "nodeType": "ElementaryTypeName",
                    "src": "832:3:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "831:5:34"
            },
            "scope": 11964,
            "src": "787:50:34",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 12007,
        "src": "763:76:34"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 12006,
        "linearizedBaseContracts": [
          12006
        ],
        "name": "NXMDSValue",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 11967,
            "libraryName": {
              "contractScope": null,
              "id": 11965,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 213,
              "src": "872:8:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$213",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "866:24:34",
            "typeName": {
              "id": 11966,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "885:4:34",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 12004,
              "nodeType": "Block",
              "src": "1066:535:34",
              "statements": [
                {
                  "assignments": [
                    11973
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11973,
                      "name": "aggregator",
                      "nodeType": "VariableDeclaration",
                      "scope": 12004,
                      "src": "1125:21:34",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Aggregator_$11964",
                        "typeString": "contract Aggregator"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 11972,
                        "name": "Aggregator",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 11964,
                        "src": "1125:10:34",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Aggregator_$11964",
                          "typeString": "contract Aggregator"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 11977,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "307837373336313645346431314137384635313132393930303264613537413061393435373746316634",
                        "id": 11975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1160:42:34",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "value": "0x773616E4d11A78F511299002da57A0a94577F1f4"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 11974,
                      "name": "Aggregator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11964,
                      "src": "1149:10:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_Aggregator_$11964_$",
                        "typeString": "type(contract Aggregator)"
                      }
                    },
                    "id": 11976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1149:54:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Aggregator_$11964",
                      "typeString": "contract Aggregator"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1125:78:34"
                },
                {
                  "assignments": [
                    11979
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11979,
                      "name": "rate",
                      "nodeType": "VariableDeclaration",
                      "scope": 12004,
                      "src": "1209:8:34",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 11978,
                        "name": "int",
                        "nodeType": "ElementaryTypeName",
                        "src": "1209:3:34",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 11983,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 11980,
                        "name": "aggregator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11973,
                        "src": "1220:10:34",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Aggregator_$11964",
                          "typeString": "contract Aggregator"
                        }
                      },
                      "id": 11981,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestAnswer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11963,
                      "src": "1220:23:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_int256_$",
                        "typeString": "function () view external returns (int256)"
                      }
                    },
                    "id": 11982,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1220:25:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1209:36:34"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "id": 11987,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 11985,
                          "name": "rate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11979,
                          "src": "1333:4:34",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 11986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1340:1:34",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1333:8:34",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "526174652073686f756c64206265206120706f73697469766520696e7465676572",
                        "id": 11988,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1343:35:34",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_aa2b0ff740806e3379cb7ff19d183b131a88f83d7974316fa9e31a346478cb0b",
                          "typeString": "literal_string \"Rate should be a positive integer\""
                        },
                        "value": "Rate should be a positive integer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_aa2b0ff740806e3379cb7ff19d183b131a88f83d7974316fa9e31a346478cb0b",
                          "typeString": "literal_string \"Rate should be a positive integer\""
                        }
                      ],
                      "id": 11984,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        42312,
                        42313
                      ],
                      "referencedDeclaration": 42313,
                      "src": "1325:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1325:54:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11990,
                  "nodeType": "ExpressionStatement",
                  "src": "1325:54:34"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 11999,
                                "name": "rate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11979,
                                "src": "1589:4:34",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              ],
                              "id": 11998,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1584:4:34",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": "uint"
                            },
                            "id": 12000,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1584:10:34",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(29 digits omitted)...0000"
                                },
                                "id": 11995,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "3130",
                                  "id": 11993,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1570:2:34",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "3336",
                                  "id": 11994,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1576:2:34",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36_by_1",
                                    "typeString": "int_const 36"
                                  },
                                  "value": "36"
                                },
                                "src": "1570:8:34",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(29 digits omitted)...0000"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1000000000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(29 digits omitted)...0000"
                                }
                              ],
                              "id": 11992,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1565:4:34",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": "uint"
                            },
                            "id": 11996,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1565:14:34",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 11997,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 146,
                          "src": "1565:18:34",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 12001,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1565:30:34",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11991,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1557:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes32_$",
                        "typeString": "type(bytes32)"
                      },
                      "typeName": "bytes32"
                    },
                    "id": 12002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1557:39:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 11971,
                  "id": 12003,
                  "nodeType": "Return",
                  "src": "1550:46:34"
                }
              ]
            },
            "documentation": "@dev Get DAI-ETH feed from Chainlink and convert it to ETH-DAI(in bytes32).\n @return Return ETH-DAI rate in wei.",
            "id": 12005,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "read",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11968,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1031:2:34"
            },
            "returnParameters": {
              "id": 11971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11970,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 12005,
                  "src": "1055:7:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 11969,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1055:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1054:9:34"
            },
            "scope": 12006,
            "src": "1018:583:34",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 12007,
        "src": "841:762:34"
      }
    ],
    "src": "685:919:34"
  },
  "bytecode": "0x608060405234801561001057600080fd5b50610270806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806357de26a414610030575b600080fd5b61003861004a565b60408051918252519081900360200190f35b60008073773616e4d11a78f511299002da57a0a94577f1f490506000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561009f57600080fd5b505afa1580156100b3573d6000803e3d6000fd5b505050506040513d60208110156100c957600080fd5b505190506000811361010f57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806102246021913960400191505060405180910390fd5b61012e6ec097ce7bc90715b34b9f10000000008263ffffffff61013516565b9250505090565b600061017783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061017e565b9392505050565b6000818361020d57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101d25781810151838201526020016101ba565b50505050905090810190601f1680156101ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161021957fe5b049594505050505056fe526174652073686f756c64206265206120706f73697469766520696e7465676572a165627a7a723058204f852e21aa8e35f016253ebb78cb8e163fb0a291a1c223b3d17d5ffdaa7595c30029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806357de26a414610030575b600080fd5b61003861004a565b60408051918252519081900360200190f35b60008073773616e4d11a78f511299002da57a0a94577f1f490506000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561009f57600080fd5b505afa1580156100b3573d6000803e3d6000fd5b505050506040513d60208110156100c957600080fd5b505190506000811361010f57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806102246021913960400191505060405180910390fd5b61012e6ec097ce7bc90715b34b9f10000000008263ffffffff61013516565b9250505090565b600061017783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061017e565b9392505050565b6000818361020d57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101d25781810151838201526020016101ba565b50505050905090810190601f1680156101ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161021957fe5b049594505050505056fe526174652073686f756c64206265206120706f73697469766520696e7465676572a165627a7a723058204f852e21aa8e35f016253ebb78cb8e163fb0a291a1c223b3d17d5ffdaa7595c30029",
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "petersburg"
  }
}
